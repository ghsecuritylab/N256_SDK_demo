/* Copyright Statement:
*
* (C) 2005-2017  MediaTek Inc. All rights reserved.
*
* This software/firmware and related documentation ("MediaTek Software") are
* protected under relevant copyright laws. The information contained herein
* is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
* Without the prior written permission of MediaTek and/or its licensors,
* any reproduction, modification, use or disclosure of MediaTek Software,
* and information contained herein, in whole or in part, shall be strictly prohibited.
* You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
* if you have agreed to and been bound by the applicable license agreement with
* MediaTek ("License Agreement") and been granted explicit permission to do so within
* the License Agreement ("Permitted User").  If you are not a Permitted User,
* please cease any access or use of MediaTek Software immediately.
* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
* THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
* ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
* WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
* NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
* SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
* SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
* THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
* THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
* CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
* SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
* CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
* AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
* OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
* MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*/
/*
 **************************************************************************/
/** @file
 * GKI header file with the MMK OS implementation of the GKI task
 * definition macros.
 **************************************************************************/

/*
** KI_TASK_DEF_TYPE should be defined to be either
**
**     KI_QUEUE_SETUP
**     KI_TASK_SETUP
**     KI_TASK_DECLARE
**
** by the including file
*/
/*
** This file deiberately does not have a
** #if !defined KINAXDEF_H
** as it can be legitimately included twice
*/

#if !defined (IN_KI_TASK_DEF)
#   error This file can only be included in KITSKDEFOS.H
#endif

/* __TARGET_FEATURE_DOUBLEWORD is generated by RVCT if the target architecture supports the LDRD, STRD instructions.
 ** That is, ARMv5T and later.
 ** --cpu ARM1156T2-S will cause this to be generated
 ** --cpu ARM7TDMI and --cpu ARM920T will not
 *
 ** on architectures that support these instructions, the stacks need to be 8byte aligned
 *
 */
#define TCB_OVERHEAD            ( 0 ) // r0-r12, lr, pc, cpsr = 16 registers
#if defined (__TARGET_FEATURE_DOUBLEWORD)
#define KI_TASK_STACK_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY)    \
       Int32 ki##ENTRY_POINT##Stack[(M_KiRoundToN(STACK_SIZE+TCB_OVERHEAD+KI_STACK_INCREASE,8))/sizeof(Int32)];
#else
#define KI_TASK_STACK_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY)    \
       Int32 ki##ENTRY_POINT##Stack[(M_KiRoundToLong(STACK_SIZE+TCB_OVERHEAD+KI_STACK_INCREASE))/sizeof(Int32)];
#endif

#if KI_TASK_DEF_TYPE == KI_QUEUE_SETUP
/* MMK doesn't need this (incompatible with KI_ENABLE_OWN_QUEUEING) */
#endif

#if KI_TASK_DEF_TYPE == KI_TASK_DECLARE
#   define KI_TASK_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY)                  \
       extern void ENTRY_POINT(void);
#endif

#if KI_TASK_DEF_TYPE == KI_TASK_SETUP
# if defined (KI_DISABLE_STACK_POOLS)
#   define KI_TASKEX_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY,STACKPOOL) \
        { TASK_ID, ENTRY_POINT, ki##ENTRY_POINT##Stack, M_KiRoundToLong(STACK_SIZE+TCB_OVERHEAD+KI_STACK_INCREASE), PRIORITY },
# else
#   define KI_TASKEX_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY,STACKPOOL) \
        { TASK_ID, ENTRY_POINT, kiTaskStackPool##STACKPOOL.ki##ENTRY_POINT##Stack, M_KiRoundToLong(STACK_SIZE+TCB_OVERHEAD+KI_STACK_INCREASE), PRIORITY },
# endif
#   define KI_TASK_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY) \
        KI_TASKEX_DEF(TASK_ID,QUEUE_ID,ENTRY_POINT,STACK_SIZE,QUEUE_SIZE,PRIORITY,0)
#endif

/*
** Example task specification
**                                                         Stack  Queue
**              Task Id      Queue Id      Entry Point     Size   Size   Priority
** KI_TASK_DEF (SIM_TASK_ID, SIM_QUEUE_ID, SimManagerTask, 1024,  30,    8)
**
** use KI_RESERVED_TASK to reserve places in the task table without defining
** an entry point.
**
** KI_RESERVED_TASK (ALPB_TASK_ID, ALPB_QUEUE_ID)
**
** Example alias definition
**
**               Real Task Id  Alias Task Id   Alias Queue Id
** KI_START_ALIAS (EX_ALIASES)
** KI_ALIAS_DEF (AL_TASK_ID,   ALSM_TASK_ID,   ALSM_QUEUE_ID)
** KI_ALIAS_DEF (AL_TASK_ID,   ALSS_TASK_ID,   ALSS_QUEUE_ID)
** KI_STOP_ALIAS (EX_ALIASES)
**
** WARNING: When using aliases the value in the enumeration must be stored
**          first (using the KI_START_ALIAS macro) and then re-instated after
**          (using the KI_END_ALIAS macro) the alias definition.
**
*/

/* END OF FILE */
