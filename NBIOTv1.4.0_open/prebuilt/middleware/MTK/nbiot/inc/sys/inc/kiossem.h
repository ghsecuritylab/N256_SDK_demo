/* Copyright Statement:
*
* (C) 2005-2017  MediaTek Inc. All rights reserved.
*
* This software/firmware and related documentation ("MediaTek Software") are
* protected under relevant copyright laws. The information contained herein
* is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
* Without the prior written permission of MediaTek and/or its licensors,
* any reproduction, modification, use or disclosure of MediaTek Software,
* and information contained herein, in whole or in part, shall be strictly prohibited.
* You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
* if you have agreed to and been bound by the applicable license agreement with
* MediaTek ("License Agreement") and been granted explicit permission to do so within
* the License Agreement ("Permitted User").  If you are not a Permitted User,
* please cease any access or use of MediaTek Software immediately.
* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
* THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
* ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
* WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
* NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
* SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
* SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
* THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
* THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
* CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
* SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
* CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
* AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
* OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
* MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*/
/*
 **************************************************************************/
/** \file
 * Internal GKI header for semaphore functions and data.
 **************************************************************************/

#ifndef KIOSSEM_H
#define KIOSSEM_H

/** \addtogroup PrdGki
 * @{
 */

/***************************************************************************
 * Nested Include Files
 **************************************************************************/

#include <system.h>
#include <kios.h>
#include <ki_sema.h>

/***************************************************************************
 * Defines
 **************************************************************************/

/** Size of semaphore name.
 * This define gives the number of characters in a semaphore name not
 * including the terminating NULL char. */
#define KI_SEM_MAX_NAME_CHARS       4

/***************************************************************************
 * Typedefs
 **************************************************************************/

/** Data for a single semaphore.
 * This structure is used to hold run time information needed by the GKI to
 * manage a semaphore. */
typedef struct KiSemDefTag
{
    /** The OS specific handle for the semaphore. */
    KiOsSemaphoreHandle  osHandle;
    /** The name of the semaphore generated by the GKI. */
    char                 name[KI_SEM_MAX_NAME_CHARS + 1];

} KiSemDef;

/***************************************************************************
 * Macros
 **************************************************************************/

/** Pack the semaphore name into an Int32.
 * This macro returns the first 4 characters of the semaphore name packed
 * into an Int32 value.
 *
 * \param[in] nAME The name of a GKI semaphore.
 *
 * \return An #Int32 containing the first 4 bytes of the semaphore name. */
#define M_KiSemGetInt32HexName(nAME) ((Int32)(((nAME)[0] << 24) + \
                                              ((nAME)[1] << 16) + \
                                              ((nAME)[2] << 8) + \
                                               (nAME)[3]))

/* The above macro assumes that KI_SEM_MAX_NAME_CHARS is at least 3 so
 * check for that now. */
#if (KI_SEM_MAX_NAME_CHARS < 3)
# error The KI_SEM_MAX_NAME_CHARS needs to be at least 3 or M_KiSemGetInt32HexName needs to be changed.
#endif

/***************************************************************************
 * Global Data
 **************************************************************************/

/** Initial counts for semaphores.
 * This array holds the initial counts for all the semaphores defined in
 * kisyssem.h. The semaphores are set to these values when they are
 * created. */
extern const SignedInt32     kiInitSemCount[KI_NUM_SEMAPHORES + 1];

/** Semaphore data.
 * This array holds run-time information for all the semaphores defined
 * in kisyssem.h. */
extern KiSemDef              kiSemDefTable[KI_NUM_SEMAPHORES];

/***************************************************************************
 * Global Functions
 **************************************************************************/

/** Initialise GKI semaphores.
 * This function is called by #KiReset to initialise all the GKI
 * semaphores. */
void KiInitialiseSemaphores(void);

/** @} */ /* End of PrdGki group */

#endif

/* END OF FILE */
