/* Copyright Statement:
*
* (C) 2005-2017  MediaTek Inc. All rights reserved.
*
* This software/firmware and related documentation ("MediaTek Software") are
* protected under relevant copyright laws. The information contained herein
* is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
* Without the prior written permission of MediaTek and/or its licensors,
* any reproduction, modification, use or disclosure of MediaTek Software,
* and information contained herein, in whole or in part, shall be strictly prohibited.
* You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
* if you have agreed to and been bound by the applicable license agreement with
* MediaTek ("License Agreement") and been granted explicit permission to do so within
* the License Agreement ("Permitted User").  If you are not a Permitted User,
* please cease any access or use of MediaTek Software immediately.
* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
* THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
* ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
* WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
* NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
* SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
* SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
* THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
* THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
* CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
* SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
* CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
* AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
* OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
* MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*/
/*
 ***************************************************************************
 * File Description:
 **************************************************************************/

#if defined(GET_AUDIO_DEVICE_FROM_AUDIO_DEF)
#  define AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)        dEVICEnAME,
#  define AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)                                                  dEVICEnAME,
#  define AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)      dEVICEnAME,
#  define LAST_AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)   dEVICEnAME,
#  define LAST_AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)                                             dEVICEnAME
#  define LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE) dEVICEnAME,
#elif defined(GET_DEVICE_MANAGER_FROM_AUDIO_DEF)
#  define AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)        dEVICEmANAGER,
#  define AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)
#  define LAST_AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)   dEVICEmANAGER
#  define LAST_AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)
#elif defined(GET_VOLUME_TABLE_FROM_AUDIO_DEF)
#  define AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)        vOLUMEtABLE,
#  define AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)
#  define LAST_AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)   vOLUMEtABLE
#  define LAST_AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)
#elif defined(GET_AUDIO_DEVICE_MENU_NAME_FROM_AUDIO_DEF)
#  define AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)        aUDIOdEVICEnAME,
#  define AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)      aUDIOdEVICEnAME,
#  define LAST_AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)   aUDIOdEVICEnAME,
#  define LAST_AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE) aUDIOdEVICEnAME
#elif defined(GET_AUDIO_DEVICE_MUTE_STATE_FROM_AUDIO_DEF)
#  define AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)        mUTEsTATE,
#  define AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)      mUTEsTATE,
#  define LAST_AUDIO_DEF(dEVICEnAME, dEVICEmANAGER, vOLUMEtABLE, aUDIOdEVICEnAME, mUTEsTATE)   mUTEsTATE,
#  define LAST_AUDIO_DEF_NON_EXIST_DEV(dEVICEnAME)
#  define LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(dEVICEnAME, aUDIOdEVICEnAME, mUTEsTATE)
#else
#  error "Must define one of the above GET_xxxx"
#endif

/****************************************************************************************
 * Note:
 * =====
 * When adding a device, either output or input, define the associated :
 * #define AUDMGR_xxx in dlaudio.c
 * #define AUDVOL_xxx   in l1aucal.c
 *
 ****************************************************************************************
 */

/* Start of Output Devices list */
AUDIO_DEF(NON_EXISTENT_DEVICE = 0,            AUDMGR_NON_EXISTENT_DEVICE,         AUDVOL_NON_EXISTENT_DEVICE,         "NE", FALSE)
/* Genuine devices must be non-zero to avoid compiler warnings in if() statements!! */
AUDIO_DEF(MAIN_SPEAKER,                       AUDMGR_MAIN_SPEAKER,                AUDVOL_MAIN_SPEAKER,                "MS", FALSE)
AUDIO_DEF(AUX_SPEAKER,                        AUDMGR_AUX_SPEAKER,                 AUDVOL_AUX_SPEAKER,                 "AS", FALSE)
AUDIO_DEF(EXT_TONE_GEN,                       AUDMGR_EXT_TONE_GEN,                AUDVOL_EXT_TONE_GEN,                "TG", FALSE)
AUDIO_DEF(STEREO_SPEAKER,                     AUDMGR_STEREO_SPEAKER,              AUDVOL_STEREO_SPEAKER,              "SS", FALSE)
AUDIO_DEF(RINGTONE_SPEAKER,                   AUDMGR_RINGTONE_SPEAKER,            AUDVOL_RINGTONE_SPEAKER,            "RS", FALSE)
AUDIO_DEF(CAR_KIT_SPEAKER,                    AUDMGR_CAR_KIT_SPEAKER,             AUDVOL_CAR_KIT_SPEAKER,             "CK", FALSE)
AUDIO_DEF(SPEAKERPHONE_SPEAKER,               AUDMGR_SPEAKERPHONE_SPEAKER,        AUDVOL_SPEAKERPHONE_SPEAKER,        "SP", FALSE)
AUDIO_DEF(EXTERNAL_SPEAKER,                   AUDMGR_EXTERNAL_SPEAKER,            AUDVOL_EXTERNAL_SPEAKER,            "EX", FALSE)
AUDIO_DEF(AUDIO_BUZZER_0,                     AUDMGR_AUDIO_BUZZER_0,              AUDVOL_AUDIO_BUZZER_0,              "B0", FALSE)
AUDIO_DEF(AUDIO_BUZZER_1,                     AUDMGR_AUDIO_BUZZER_1,              AUDVOL_AUDIO_BUZZER_1,              "B1", FALSE)
AUDIO_DEF(AUDIO_BUZZER_2,                     AUDMGR_AUDIO_BUZZER_2,              AUDVOL_AUDIO_BUZZER_2,              "B2", FALSE)
AUDIO_DEF(BLUETOOTH_SPEAKER,                  AUDMGR_BLUETOOTH_SPEAKER,           AUDVOL_BLUETOOTH_SPEAKER,           "BS", FALSE)
AUDIO_DEF(DSPTEST_SPEAKER,                    AUDMGR_DSPTEST_SPEAKER,             AUDVOL_DSPTEST_SPEAKER,             "DS", FALSE)
AUDIO_DEF(DAI_OUT,                            AUDMGR_DAI_OUT,                     AUDVOL_DAI_OUT,                     "DO", FALSE)
AUDIO_DEF(MODEM_TX,                           AUDMGR_MODEM_TX,                    AUDVOL_MODEM_TX,                    "TX", FALSE)
AUDIO_DEF(USER_DEFINED_00_SPEAKER,            AUDMGR_USER_DEFINED_00_SPEAKER,     AUDVOL_USER_DEFINED_00_SPEAKER,     "0S", FALSE)
AUDIO_DEF(USER_DEFINED_01_SPEAKER,            AUDMGR_USER_DEFINED_01_SPEAKER,     AUDVOL_USER_DEFINED_01_SPEAKER,     "1S", FALSE)
AUDIO_DEF(USER_DEFINED_02_SPEAKER,            AUDMGR_USER_DEFINED_02_SPEAKER,     AUDVOL_USER_DEFINED_02_SPEAKER,     "2S", FALSE)
AUDIO_DEF(USER_DEFINED_03_SPEAKER,            AUDMGR_USER_DEFINED_03_SPEAKER,     AUDVOL_USER_DEFINED_03_SPEAKER,     "3S", FALSE)
AUDIO_DEF(USER_DEFINED_04_SPEAKER,            AUDMGR_USER_DEFINED_04_SPEAKER,     AUDVOL_USER_DEFINED_04_SPEAKER,     "4S", FALSE)
AUDIO_DEF(USER_DEFINED_05_SPEAKER,            AUDMGR_USER_DEFINED_05_SPEAKER,     AUDVOL_USER_DEFINED_05_SPEAKER,     "5S", FALSE)
AUDIO_DEF(USER_DEFINED_06_SPEAKER,            AUDMGR_USER_DEFINED_06_SPEAKER,     AUDVOL_USER_DEFINED_06_SPEAKER,     "6S", FALSE)
AUDIO_DEF(USER_DEFINED_07_SPEAKER,            AUDMGR_USER_DEFINED_07_SPEAKER,     AUDVOL_USER_DEFINED_07_SPEAKER,     "7S", FALSE)
AUDIO_DEF_NON_EXIST_DEV(FIRST_OUTPUT_DEVICE = MAIN_SPEAKER)
AUDIO_DEF_NON_EXIST_DEV(LAST_OUTPUT_DEVICE = USER_DEFINED_07_SPEAKER)
/* End of Output Device list */

/* Start of Input Devices list */
AUDIO_DEF(MAIN_MIC,                           AUDMGR_MAIN_MIC,                    AUDVOL_MAIN_MIC,                    "MM", FALSE)
AUDIO_DEF(AUX_MIC,                            AUDMGR_AUX_MIC,                     AUDVOL_AUX_MIC,                     "AM", FALSE)
AUDIO_DEF(CAR_KIT_MIC,                        AUDMGR_CAR_KIT_MIC,                 AUDVOL_CAR_KIT_MIC,                 "CM", FALSE)
AUDIO_DEF(STEREO_MIC,                         AUDMGR_STEREO_MIC,                  AUDVOL_STEREO_MIC,                  "SM", FALSE)
AUDIO_DEF(SPEAKERPHONE_MIC,                   AUDMGR_SPEAKERPHONE_MIC,            AUDVOL_SPEAKERPHONE_MIC,            "SM", FALSE)
AUDIO_DEF(SPEECH_RECOGNITION_MIC,             AUDMGR_SPEECH_RECOGNITION_MIC,      AUDVOL_SPEECH_RECOGNITION_MIC,      "RM", FALSE)
AUDIO_DEF(EXTERNAL_MIC,                       AUDMGR_EXTERNAL_MIC,                AUDVOL_EXTERNAL_MIC,                "EM", FALSE)
AUDIO_DEF(BLUETOOTH_MIC,                      AUDMGR_BLUETOOTH_MIC,               AUDVOL_BLUETOOTH_MIC,               "BM", FALSE)
AUDIO_DEF(DSPTEST_MIC,                        AUDMGR_DSPTEST_MIC,                 AUDVOL_DSPTEST_MIC,                 "DM", FALSE)
AUDIO_DEF(DAI_IN,                             AUDMGR_DAI_IN,                      AUDVOL_DAI_IN,                      "DI", FALSE)
AUDIO_DEF(MODEM_RX,                           AUDMGR_MODEM_RX,                    AUDVOL_MODEM_RX,                    "RX", FALSE)
AUDIO_DEF(USER_DEFINED_00_MIC,                AUDMGR_USER_DEFINED_00_MIC,         AUDVOL_USER_DEFINED_00_MIC,         "0M", FALSE)
AUDIO_DEF(USER_DEFINED_01_MIC,                AUDMGR_USER_DEFINED_01_MIC,         AUDVOL_USER_DEFINED_01_MIC,         "1M", FALSE)
AUDIO_DEF(USER_DEFINED_02_MIC,                AUDMGR_USER_DEFINED_02_MIC,         AUDVOL_USER_DEFINED_02_MIC,         "2M", FALSE)
AUDIO_DEF(USER_DEFINED_03_MIC,                AUDMGR_USER_DEFINED_03_MIC,         AUDVOL_USER_DEFINED_03_MIC,         "3M", FALSE)
AUDIO_DEF(USER_DEFINED_04_MIC,                AUDMGR_USER_DEFINED_04_MIC,         AUDVOL_USER_DEFINED_04_MIC,         "4M", FALSE)
AUDIO_DEF(USER_DEFINED_05_MIC,                AUDMGR_USER_DEFINED_05_MIC,         AUDVOL_USER_DEFINED_05_MIC,         "5M", FALSE)
AUDIO_DEF(USER_DEFINED_06_MIC,                AUDMGR_USER_DEFINED_06_MIC,         AUDVOL_USER_DEFINED_06_MIC,         "6M", FALSE)
LAST_AUDIO_DEF(USER_DEFINED_07_MIC,           AUDMGR_USER_DEFINED_07_MIC,         AUDVOL_USER_DEFINED_07_MIC,         "7M", FALSE)
AUDIO_DEF_NON_EXIST_DEV(FIRST_INPUT_DEVICE = MAIN_MIC)
AUDIO_DEF_NON_EXIST_DEV(LAST_INPUT_DEVICE = USER_DEFINED_07_MIC)
/* End of Input Devices list */

/* Totals and Other Constants */
AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(NOT_CONNECTED,        "NC", FALSE)
LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY(NUMBER_AUDIO_DEVICES, "--", FALSE)
AUDIO_DEF_NON_EXIST_DEV(AUDIO_FIRST_DEVICE = FIRST_OUTPUT_DEVICE) /* Used as a limit within 'for' loops */
AUDIO_DEF_NON_EXIST_DEV(AUDIO_LAST_DEVICE = LAST_INPUT_DEVICE)    /* Used as a limit within 'for' loops */

/* Legacy device defines */
AUDIO_DEF_NON_EXIST_DEV(AUDIO_OUTPUT_0 = AUDIO_BUZZER_0)
AUDIO_DEF_NON_EXIST_DEV(AUDIO_OUTPUT_1 = AUDIO_BUZZER_1)
LAST_AUDIO_DEF_NON_EXIST_DEV(AUDIO_OUTPUT_2 = AUDIO_BUZZER_2)

#undef AUDIO_DEF
#undef AUDIO_DEF_NON_EXIST_DEV
#undef AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY
#undef LAST_AUDIO_DEF
#undef LAST_AUDIO_DEF_NON_EXIST_DEV
#undef LAST_AUDIO_DEF_NON_EXIST_DEV_WITH_ENUM_ENTRY


